#A Range Module is a module that tracks ranges of numbers. Your task is to design and implement the following interfaces in an efficient manner.#

#addRange(int left, int right) Adds the half-open interval [left, right), tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked.
queryRange(int left, int right) Returns true if and only if every real number in the interval [left, right) is currently being tracked.
removeRange(int left, int right) Stops tracking every real number currently being tracked in the interval [left, right).
Example 1:
addRange(10, 20): null
removeRange(14, 16): null
queryRange(10, 14): true (Every number in [10, 14) is being tracked)
queryRange(13, 15): false (Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)
queryRange(16, 17): true (The number 16 in [16, 17) is still being tracked, despite the remove operation)
Note:

A half open interval [left, right) denotes all real numbers left <= x < right.
0 < left < right < 10^9 in all calls to addRange, queryRange, removeRange.
The total number of calls to addRange in a single test case is at most 1000.
The total number of calls to queryRange in a single test case is at most 5000.
The total number of calls to removeRange in a single test case is at most 1000.#



Solution 1:
Create a New_List,
add a inteval[left,right) in list: list[left] == True list[right]==False right side from 'left' will all defined as tracked until a False comesout, if it is true.    

class RangeModule(object):

    def __init__(self):
        self.X = [0, 10**9]
        self.track = [False] * 2  #same as [False,False]

    def addRange(self, left, right, track=True):
        def index(x):
            i = bisect.bisect_left(self.X, x)
            if self.X[i] != x:
                self.X.insert(i, x)
                self.track.insert(i, self.track[i-1])
            return i
        i = index(left)
        j = index(right)
        self.X[i:j] = [left]
        self.track[i:j] = [track]

    def queryRange(self, left, right):
        i = bisect.bisect(self.X, left) - 1
        j = bisect.bisect_left(self.X, right)
        return all(self.track[i:j])

    def removeRange(self, left, right):
        self.addRange(left, right, False)
        
        
Solution 2:
create a List.通过序号i 的单双来判断在区间内外。
left 如果是单数证明左边都是成对的数字 2个数字组成一个区间 因此left不在区间内。
同理right。故left 可取代index【left】+1  right 课取代 index【right】-1

若偶数 则left插入已有区间内 左侧index【left】-1小于 left，故取代之。
right 同理 右侧大于 right 取代之。


from bisect import bisect_left, bisect

class RangeModule(object):

    def __init__(self):
        self.range = [-float('inf'), float('inf')]

    def addRange(self, left, right):
        self._updateRange(left, right, 0)
        
    def queryRange(self, left, right):
        li = bisect(self.range, left)
        ri = bisect_left(self.range, right)
        return li == ri and li % 2 == 0
    
    def removeRange(self, left, right):
        self._updateRange(left, right, 1)

    def _updateRange(self, left, right, op):
        li = bisect_left(self.range, left)
        ri = bisect(self.range, right)
        
        if li % 2 == op:
            li = li - 1
            left = self.range[li]
        if ri % 2 == op:
            right = self.range[ri]
            ri += 1
            
        self.range[li:ri] = [left, right]
